* Этапы
** MVP [1/5]
*** DONE эхобот
CLOSED: [2020-03-24 Вт 22:06]
- State "DONE"       from "TODO"       [2020-03-24 Вт 22:06]
*** TODO Stateless implementation
*БД*: SQLite
**** Приложения и модели
- [X] users:
  - [X] User:
    - ID
    - name
    - TimeAdded
- [ ] courses:
  - [ ] Course:
    - name
    - parent
    - lessons_set
  - [ ] Lesson:
    - name
    - documents_set
  - [ ] Document
    - name
    - lesson_id
    - link (или id, как там отправлять)
    - priority: int
**** Реализация по шагам
***** DONE 1. Users
CLOSED: [2020-03-24 Вт 22:07]
- State "DONE"       from "TODO"       [2020-03-24 Вт 22:07]
- State "TODO"       from              [2020-03-22 Вс 17:29]

- [X] описать модель;
- [X] выполнить миграцию (??);
- [X] запись нового пользователя в БД (проверка например при команде ~/start~);
- [X] ответ об успешной записи в БД.
**** Обработка
*** TODO скрипт наполнения БД
*** TODO webhooks
*** TODO deploy
** TODO Statefull implementation
- State "TODO"       from              [2020-03-22 Вс 17:30]
[[https://docs.microsoft.com/ru-ru/azure/bot-service/bot-builder-concept-state?view=azure-bot-service-4.0][Какая-то статья об управлении состоянием ботов]]
** Вопросы. Ответов [0/2]
- [ ] какую БД использовать (SQL или NoSQL):
  - нужна ли глубокая вложенность для курсов и как её обрабатывать:
    - для вложенности нужно лишь 2 типа, это лист и ветвь;
  - ORM для ~NoSQL~ для Go;
- [ ] как реализовать ~statefull~ бота. Принципы обработки состояний;
* Идеи дальнейшего расширения бота
- бот для MOOC курсов;
- статистика обучения с графиками;
- напоминания для изучения;
- загрузка своих курсов через веб морду:
  - телеграмм не может 100% гарантировать сохранность данных, поэтому лучше всего будет хранить все курсы "на своей стороне";
- к курсам в будущем могут быть присвоены тэги и категории;
- конфигуратор тестов из веб морды, например;
* Журнал
** [2020-03-22 Вс] [1/1]
- [X] реализовать эхо бота с записью пользователя в БД
** Следующий
- [ ] продумать схему БД для курсов, учитывая, что:
  - курсы могут дробиться на подкурсы;
  - к одному курсу могут быть прикреплено разное количество документов;
  - документы могут быть разных типов и с разным приоритетом подачи документов курса;
- [ ] продумать реализацию stateless обработчиков запросов;
- [ ] набросать и синхронизировать схему БД;
- [ ] написать скрипт наполнения БД, думаю, лучше на питоне;
- [ ] подумать над прикреплением ссылок на авторов курсов;
